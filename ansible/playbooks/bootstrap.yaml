# This playbook is for initial setup ONLY and should only be run once per host
# Ideally nothing would be in here and we'd do it all in terraform
# But bpg/proxmox doesn't have all settings,
# and i dont want to give jenkins agents access to the controller so here we are
# TODO: move jenkcontroller stuff into its own block
# Issue URL: https://github.com/rachelf42/homelab/issues/49
# labels: enhancement
- name: prompts
  hosts: [all]
  gather_facts: false
  tasks:
    - name: confirm limit
      when: "'pve' in group_names"
      delegate_to: localhost
      run_once: true # noqa: run-once[task]
      register: limited
      ansible.builtin.pause:
        prompt: >-
          CONFIRM: have you used the --limit argument
          to ensure this playbook is never run
          against already-bootstrapped hosts? [Y/N]
    - name: confirm LE TOS
      when: "'pve' in group_names"
      delegate_to: localhost
      run_once: true # noqa: run-once[task]
      register: letos
      ansible.builtin.pause:
        prompt: >-
          CONFIRM: Do you agree to the
          current Let's Encrypt Terms
          Of Service? It is YOUR *LEGAL*
          RESPONSIBILITY to find them
          and read them in full. [Y/N]
    - name: confirm askpass
      when: "'pve' in group_names"
      delegate_to: localhost
      run_once: true # noqa: run-once[task]
      register: askpass
      ansible.builtin.pause:
        prompt: >-
          CONFIRM: have you used the --ask-pass argument?
          This playbook is the one that copies the ansible
          SSH key to PVE, so cannot use standard key-based
          authentication. [Y/N]
    - name: confirm predeploy
      when: "'pve' in group_names"
      delegate_to: localhost
      run_once: true # noqa: run-once[task]
      register: predeploy
      ansible.builtin.pause:
        # needed to create the inventory record
        # not sure if we'd ever get to this point if there wasnt one
        # but it cant hurt to check since future me is not to be trusted to remember things
        prompt: >-
          CONFIRM: new node(s) have been added to
          ans-statics.auto.tfvars and
          'terraform apply' has been run? [Y/N]
    - name: confirm bootstrap terraform is run
      delegate_to: localhost
      when: "'pve' not in group_names"
      run_once: true # noqa: run-once[task]
      register: terrastrap
      ansible.builtin.pause:
        prompt: "CONFIRM: has the /bootstrap terraform project been applied? [Y/N]"
    - name: assertions
      delegate_to: localhost
      run_once: true # noqa: run-once[task]
      loop:
        - letos
        - askpass
        - limited
        - predeploy
        - terrastrap
      ansible.builtin.assert:
        quiet: true
        that: >-
          {{ item }} is ansible.builtin.skipped
          or {{ item }}.user_input is match("y")
          or {{ item }}.user_input is match("Y")
    - name: wait for connection
      ansible.builtin.wait_for_connection:
        sleep: 10
        timeout: 3600
- name: bootstrap PVE
  hosts: [pve]
  tasks:
    - name: no subscription
      # all of these are only needed
      # because i cant afford a subscription
      # if you can then you need to change
      # this block to install your key
      # or whatever they use for auth
      block:
        - name: download nagbuster
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/foundObjects/pve-nag-buster/master/install.sh
            dest: /root/install-nagbuster.sh
            mode: u+x
            owner: root
        - name: install nagbuster
          ansible.builtin.command:
            cmd: ./install-nagbuster.sh
            creates: /usr/share/pve-nag-buster.sh
        - name: disable enterprise ceph repo
          ansible.builtin.apt_repository:
            filename: ceph
            repo: deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise
            state: absent
            update_cache: false
        - name: install nosub ceph repo
          ansible.builtin.apt_repository:
            filename: ceph
            repo: deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription
            state: present
            update_cache: false
    - name: install dependencies
      register: apt
      until: apt is ansible.builtin.success
      async: 600
      poll: 10
      delay: 30
      retries: 10
      ansible.builtin.apt:
        update_cache: true
        name: python3-pexpect
        state: present
    - name: register acme account
      changed_when: true
      async: 600
      poll: 10
      ansible.builtin.expect:
        command: >-
          pvenode acme account register default {{ user_email }}
          --directory https://acme-v02.api.letsencrypt.org/directory
        responses:
          agree to the above terms: y # RUNNING THIS TASK CONSTITUTES LEGAL AGREEMENT TO THE DIRECTORY'S TERMS
    - name: upload cloudflare data
      ansible.builtin.template:
        dest: /root/cloudflare-acme-data
        src: px-cloudflare-acme-data.j2
        mode: "0600"
        owner: root
    - name: register cloudflare acme plugin
      changed_when: true
      ansible.builtin.command: >-
        pvenode acme plugin add
        dns cloudflare --api cf
        --nodes {{ ansible_hostname }}
        --data /root/cloudflare-acme-data
    - name: set certificate domain - pve.local
      changed_when: true
      ansible.builtin.command: >-
        pvenode config set
        --acme account=default
        --acmedomain0 domain=pve.local.rachelf42.ca,plugin=cloudflare
    - name: set certificate domain - node.local
      changed_when: true
      ansible.builtin.command: >-
        pvenode config set
        --acme account=default
        --acmedomain1 domain={{ ansible_hostname }}.local.rachelf42.ca,plugin=cloudflare
    - name: order certs
      changed_when: true
      async: 600
      poll: 10
      ansible.builtin.command: pvenode acme cert order
    - name: logind.conf.d exists
      ansible.builtin.file:
        path: /etc/systemd/logind.conf.d
        state: directory
        owner: root
        group: root
        mode: "0755"
    - name: disable power buttons/lid switch
      # cause PVE specifically we do NOT want unexpected shutdowns/reboots
      ansible.builtin.blockinfile:
        path: /etc/systemd/logind.conf.d/00-ansible.conf
        marker: "# {mark} ANSIBLE POWER BUTTON BLOCK"
        state: present
        owner: root
        group: root
        create: true
        mode: "0644"
        append_newline: true
        block: |
          [Login]
          HandlePowerKey=ignore
          HandlePowerKeyLongPress=ignore
          HandleRebootKey=ignore
          HandleRebootKeyLongPress=ignore
          HandleSuspendKey=ignore
          HandleSuspendKeyLongPress=ignore
          HandleHibernateKey=ignore
          HandleHibernateKeyLongPress=ignore
          HandleLidSwitch=ignore
          HandleLidSwitchExternalPower=ignore
          HandleLidSwitchDocked=ignore
    - name: package upgrades
      async: 600
      poll: 10
      delay: 30
      retries: 10
      register: aptupgrade
      until: aptupgrade is ansible.builtin.success
      ansible.builtin.apt:
        update_cache: true
        upgrade: full
    - name: package autoremove
      async: 600
      poll: 10
      delay: 30
      retries: 10
      register: aptremove
      until: aptremove is ansible.builtin.success
      ansible.builtin.apt:
        update_cache: true
        autoremove: true
        autoclean: true
    - name: setup nonroot user # leave most of the setup to provision.yaml
      block: # i'd just leave the ansible_user as root, but it's been
        - name: initial nonroot user setup # causing workers to mysteriously
          ansible.builtin.user: # die with no log lines, so that's fun
            name: "{{ user_name }}"
            uid: 1000
            home: /home/{{ user_name }}
            move_home: true
            shell: /bin/bash
            state: present
        - name: ansible ssh key
          ansible.posix.authorized_key:
            user: "{{ user_name }}"
            key: "{{ lookup('ansible.builtin.file', '../sshkey.pub') }}"
            state: present
        - name: sudo installed
          async: 600
          poll: 10
          delay: 30
          retries: 10
          register: sudo
          until: sudo is ansible.builtin.success
          ansible.builtin.apt:
            name: sudo
            state: present
            update_cache: true
        - name: sudoer declaration in place
          community.general.sudoers:
            name: "{{ account_name }}"
            state: present
            user: "{{ user_name }}"
            commands: ALL
            nopassword: true
    - name: reboot # should probaly use ansible.builtin.reboot
      # but this is the last real task and i dont want to delay
      # the ansible command finishing just because proxmox has a lot
      # of updates or something thats a problem for the human
      # who inevitably had to do the OS install and run this playbook
      changed_when: true
      ansible.builtin.command: shutdown --reboot +10
    - name: done message
      delegate_to: localhost
      run_once: true  # noqa: run-once[task]
      ansible.builtin.pause:
        prompt: >-
          Done! Proxmox will reboot in the background.
          Next Steps:
            * Remove install media.
            * If applicable, have the newly bootstrapped node(s) join the cluster.
            * If no cluster: Create an api token for px-secret.auto.tfvars and px-common.auto.tfvars
            * Run /bootstrap/bootstrap.sh to upload the autoinstall ISO, unless:
              * It already exists on the cluster and is set to replicate.
              * It already exists on a NAS attached to the cluster.
            * Add the newly bootstrapped node(s) to proxmox.auto.tfvars
            * Re-run 'terraform apply' as there is there is additional config there.
            * Once you're confident the node(s) are set up right, run a full deploy.
        seconds: 1
- name: jenkins setup
  become: true
  hosts: [jenk]
  any_errors_fatal: true
  vars:
    deb_arch:
      armv6l: armhf,
      armv7l: armhf,
      aarch64: arm64,
      x86_64: amd64,
      i386: i386
    jenkinspkg:
      - fontconfig
      - openjdk-21-jre
      - git
  tasks:
    - name: repo setup
      when: "'jenkcontroller' in group_names"
      block:
        - name: directory exists
          ansible.builtin.file:
            path: /etc/apt/keyrings
            mode: "0755"
            state: directory
        - name: key downloaded
          ansible.builtin.get_url:
            url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
            dest: /etc/apt/keyrings/jenkins.asc
            mode: "0664"
            owner: root
            group: root
        - name: apt source installed
          async: 600
          poll: 10
          retries: 10
          ansible.builtin.apt_repository:
            filename: jenkins
            repo: >-
              deb [arch={{ deb_arch[ansible_architecture] }}
              signed-by=/etc/apt/keyrings/jenkins.asc]
              https://pkg.jenkins.io/debian-stable binary/
            state: present
    - name: dependencies installed
      register: jenkdepinst
      until: jenkdepinst is ansible.builtin.success
      async: 600
      poll: 10
      retries: 10
      ansible.builtin.apt:
        name: "{{ jenkinspkg }}"
        state: present
        update_cache: true
    - name: jenkins installed
      when: "'jenkcontroller' in group_names"
      register: jenkinst
      until: jenkinst is ansible.builtin.success
      async: 600
      poll: 10
      retries: 10
      ansible.builtin.apt:
        name: jenkins
        state: present
        update_cache: true
    - name: systemd overrides
      when: "'jenkcontroller' in group_names"
      notify: reboot
      ansible.builtin.blockinfile:
        path: /etc/systemd/system/jenkins.service.d/override.conf
        create: true
        state: present
        block: |
          [Service]
          Environment="CASC_JENKINS_CONFIG=https://raw.githubusercontent.com/rachelf42/homelab/refs/heads/main/jenkins/config.yaml"
        owner: root
        group: root
        mode: "0644"
    - name: copy secrets file
      when: "'jenkcontroller' in group_names"
      ansible.builtin.copy:
        src: jenksecrets.json
        dest: /var/lib/jenkins/userContent/secrets.json # jenkins enforces login before read
        owner: jenkins                                  # yes, this means any logged in user can read my password
        group: jenkins                                  # im the only user, its fine
        mode: "0600"
    - name: copy main ssh key
      when: "'jenkcontroller' in group_names"
      ansible.builtin.copy:
        src: jenkins_ssh_key
        dest: /var/lib/jenkins/userContent/ssh_key
        owner: jenkins
        group: jenkins
        mode: "0600"
    - name: copy devmachine ssh key
      when: "'jenkcontroller' in group_names"
      ansible.builtin.copy:
        src: id_ed25519
        dest: /var/lib/jenkins/.ssh/id_ed25519
        owner: jenkins
        group: jenkins
        mode: "0600"
    - name: copy terraform token
      when: "'jenkcontroller' in group_names"
      ansible.builtin.copy:
        src: jenkins_hcp_token
        dest: /var/lib/jenkins/userContent/terratoken
        owner: jenkins
        group: jenkins
        mode: "0600"
    - name: copy pushover token
      when: "'jenkcontroller' in group_names"
      ansible.builtin.copy:
        src: jenkins_pushover_token
        dest: /var/lib/jenkins/userContent/pushovertoken
        owner: jenkins
        group: jenkins
        mode: "0600"
    - name: copy pushover userkey
      when: "'jenkcontroller' in group_names"
      ansible.builtin.copy:
        src: jenkins_pushover_userkey
        dest: /var/lib/jenkins/userContent/pushoverkey
        owner: jenkins
        group: jenkins
        mode: "0600"
    - name: hashicorp apt repo
      block:
        - name: download key
          ansible.builtin.get_url:
            url: https://apt.releases.hashicorp.com/gpg
            dest: /etc/apt/keyrings/hashicorp.asc
            owner: root
            group: root
            mode: "0644"
        - name: add repo source
          ansible.builtin.apt_repository:
            filename: hashicorp
            repo: >-
              deb [arch={{ deb_arch[ansible_architecture] }}
              signed-by=/etc/apt/keyrings/hashicorp.asc]
              https://apt.releases.hashicorp.com
              noble main
            state: present
    - name: hashicorp tools installed
      register: hashinst
      until: hashinst is ansible.builtin.success
      async: 600
      poll: 10
      retries: 10
      loop:
        - packer
        - terraform
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
    - name: pip installed
      register: pipinst
      until: pipinst is ansible.builtin.success
      async: 600
      poll: 10
      retries: 10
      loop:
        - python3-pip
        - pipx
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
    - name: ansible installed
      become: true
      become_user: jenkins
      community.general.pipx:
        name: ansible-core
        state: install
    - name: ansible injects
      become: true
      become_user: jenkins
      community.general.pipx:
        name: ansible-core
        state: inject
        inject_packages: [ansible-pylibssh]
    - name: pipx ensurepath
      become: true
      become_user: jenkins
      check_mode: false
      register: ensurepath
      changed_when: ensurepath.stdout.find('Success!') != -1
      notify: reboot
      ansible.builtin.command: pipx ensurepath
    - name: wait for reboot
      ansible.builtin.meta: flush_handlers
    - name: retrieve bootstrap pass
      ignore_errors: true # could be missing on subsequent runs
      when: jenkinst is defined and jenkinst is ansible.builtin.changed # noqa no-handler
      register: slurp     # but not always, and using a handler messes with register
      ansible.builtin.slurp:
        src: /var/lib/jenkins/secrets/initialAdminPassword
    - name: have user complete setup
      when: slurp is ansible.builtin.success and slurp is not ansible.builtin.skipped
      ansible.builtin.pause:
        prompt: |
          Please open the Jenkins UI and complete setup.
          https://jenkins.local.rachelf42.ca:8080
          When asked, install recommended plugins.
          Your initial admin password is:

          {{
            slurp['content'] |
            ansible.builtin.b64decode |
            ansible.builtin.regex_replace("\n", "")
          }}

          Press any key to continue...
    - name: install plugins
      when: "'jenkcontroller' in group_names"
      loop:
        - job-dsl
        - configuration-as-code
      register: jenkplugins
      notify: restart jenkins
      community.general.jenkins_plugin:
        name: "{{ item }}"
        url_username: rachel
        url_password: "{{ (lookup('ansible.builtin.file', 'jenksecrets.json') | ansible.builtin.from_json)['password'] }}"
        url: http://jenkins.local.rachelf42.ca:8080
        force_basic_auth: true
    - name: bounce jenkins if needed
      ansible.builtin.meta: flush_handlers
    - name: wait for jenkins to come back
      delegate_to: localhost
      run_once: true # noqa run-once[task]
      ansible.builtin.uri:
        url: http://jenkins.local.rachelf42.ca:8080/login
        status_code: 200
        timeout: 5
      register: jenkstatus
      retries: 60
      delay: 5
      until: >-
        'status' in jenkstatus and
        jenkstatus['status'] == 200
  handlers:
    - name: reboot
      ansible.builtin.reboot:
    - name: restart jenkins
      ansible.builtin.service:
        name: jenkins
        state: restarted